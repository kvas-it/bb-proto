# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *  # noqa
from buildbot.status import html
from buildbot.status.web import authz, auth


# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['slaves'] = [
    buildslave.BuildSlave('worker1', 'pass1'),
    buildslave.BuildSlave('worker2', 'pass2'),
    buildslave.BuildSlave('worker3', 'pass3')
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that
# workers could connect to your master with this protocol.  'port' must match
# the value configured into the workers (with their --master option)
c['protocols'] = {'pb': {'port': 9989}}

# CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = [
    changes.GitPoller(
        'git://github.com/adblockplus/python-abp',
        branch='master',
        project='python-abp',
        workdir='gitpoller-workdir',
        pollinterval=300
    ),
    changes.GitPoller(
        'git://github.com/kvas-it/hello_world.git',
        branch='master',
        project='hello-world',
        workdir='gitpoller-workdir',
        pollinterval=300
    )
]

# SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In
# this case, just kick off a 'runtests' build

c['schedulers'] = [
    schedulers.SingleBranchScheduler(
        name='python-abp-all',
        change_filter=util.ChangeFilter(project='python-abp', branch='master'),
        treeStableTimer=None,
        builderNames=['python-abp-tests']
    ),
    schedulers.SingleBranchScheduler(
        name='hello-world-all',
        change_filter=util.ChangeFilter(project='hello-world',
                                        branch='master'),
        treeStableTimer=None,
        builderNames=['hello-world-tests']
    ),
    schedulers.ForceScheduler(
        name='force',
        builderNames=['python-abp-tests', 'hello-world-tests']
    )
]

# BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which workers can execute them.  Note that any
# particular build will only take place on one worker.

factory1 = util.BuildFactory()
# check out the source
factory1.addStep(
    steps.Git(
        repourl='git://github.com/adblockplus/python-abp.git',
        mode='incremental'
    )
)
factory1.addStep(steps.ShellCommand(command=['tox', '-e', 'py27']))

factory2 = util.BuildFactory()
# check out the source
factory2.addStep(
    steps.Git(
        repourl='git://github.com/kvas-it/hello_world.git',
        mode='incremental'
    )
)
factory2.addStep(steps.ShellCommand(command=['tox', '-e', 'py27']))

# run the tests (note that this will require that 'trial' is installed)

c['builders'] = [
    util.BuilderConfig(
        name='python-abp-tests',
        slavenames=['worker1', 'worker2', 'worker3'],
        factory=factory1
    ),
    util.BuilderConfig(
        name='hello-world-tests',
        slavenames=['worker1', 'worker2', 'worker3'],
        factory=factory2
    )
]

# STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

authz_cfg = authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([('root', 'toor')]),
    gracefulShutdown=False,
    forceBuild='auth',  # use this to test your slave once it is set up
    forceAllBuilds='auth',  # ..or this
    pingBuilder=False,
    stopBuild=False,
    stopAllBuilds=False,
    cancelPendingBuild=False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

# PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = 'Adblock Plus'
c['titleURL'] = 'https://adblockplus.org/'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = 'http://localhost:8010/'

# DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can
    # leave this at its default for all but the largest installations.
    'db_url': 'sqlite:///state.sqlite',
}
