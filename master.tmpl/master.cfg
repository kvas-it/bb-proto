# -*- python -*-
# ex: set filetype=python:

import os
import yaml

from buildbot.plugins import *  # noqa
from buildbot.status import html
from buildbot.status.web import authz, auth


dirname = os.path.dirname(__file__)

with open(os.path.join(dirname, 'workers.yaml')) as file:
    workers = yaml.load(file)

with open(os.path.join(dirname, 'jobs.yaml')) as file:
    jobs = yaml.load(file)


c = BuildmasterConfig = {
    # kvas: We'll need secure communitation with the workers.
    'protocols': {'pb': {'port': 9989}}
}

c['slaves'] = [buildslave.BuildSlave(w['login'], w['password'])
               for w in workers]


def make_change_source(job):
    params = dict(
        repourl=job['repo-url'],
        branch=job['branch'],
        project=job['id'],
        category='spawn',
        pollInterval=30
    )
    if job['vcs-type'] == 'git':
        return changes.GitPoller(**params)
    if job['vcs-type'] == 'hg':
        return changes.HgPoller(**params)
    raise ValueError('Unrecognized VCS type: ' + job['vcs-type'])


c['change_source'] = map(make_change_source, jobs)


def make_spawn_scheduler(job):
    """Scheduler for spawn builds."""
    name = '{id}.{branch}.spawn'.format(**job)
    return schedulers.SingleBranchScheduler(
        name=name,
        change_filter=util.ChangeFilter(project=job['id'],
                                        branch=job['branch']),
        builderNames=[name],
        treeStableTimer=None
    )


def make_force_schedulers(jobs):
    """Scheduler that allows forcing of builds."""
    return schedulers.ForceScheduler(
        name='force',
        builderNames=['{id}.{branch}.spawn'.format(**job) for job in jobs]
    )


c['schedulers'] = map(make_spawn_scheduler, jobs) + make_force_schedulers(jobs)


def make_spawn_builder(job):
    """Builder that generates the build matrix and spawns real builds."""
    if job['vcs-type'] == 'git':
        vcs_step = steps.Git(repourl=job['repo-url'], mode='incremental')
    elif job['vcs-type'] == 'hg':
        vcs_step = steps.Mercurial(repourl=job['repo-url'], mode='incremental')
    else:
        raise ValueError('Unrecognized VCS type: ' + job['vcs-type'])

    return util.BuilderConfig(
        name='{p[name]}.{p[branch]}.{t[name]}'.format(p=p, t=t),
        slavenames=[w['login'] for w in workers],
        factory=util.BuildFactory([
            vcs_step,
            steps.SetPropertyFromCommand(
                command='python run.py matrix',
                property='build-matrix'
            ),
            steps.LogRenderable()
        ])
    )


c['builders'] = map(make_spawn_builder, jobs)


authz_cfg = authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([('root', 'toor')]),
    gracefulShutdown=False,
    forceBuild='auth',  # use this to test your slave once it is set up
    forceAllBuilds='auth',  # ..or this
    pingBuilder=False,
    stopBuild=False,
    stopAllBuilds=False,
    cancelPendingBuild=False,
)

c['status'] = [html.WebStatus(http_port=8010, authz=authz_cfg)]

c['title'] = 'Adblock Plus'
c['titleURL'] = 'https://adblockplus.org/'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = 'http://localhost:8010/'

c['db'] = {
    'db_url': 'sqlite:///state.sqlite',
}
